/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_calculate_cost.old                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pablo <pablo@student.42.fr>                +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/09 21:00:00 by pablo             #+#    #+#             */
/*   Updated: 2025/05/10 01:15:56 by pablo            ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "pushswap.h"
#include <stdio.h>

/* void	print_stack(t_stack *stack, char stackname)
{
	t_blist	*current;

	if (!stack || !stack->top_element)
	{
		printf("Stack vacío\n");
		return ;
	}
	current = stack->top_element;
	printf("Stack %c: ", stackname);
	while (current)
	{
		printf("%d ", (current->value));
		current = current->next;
	}
	printf("\n");
} */

/**
 * Configura un stack con valores específicos para las pruebas
 */
t_stack	*setup_test_stack(int *values, int size)
{
	t_stack	*stack;
	t_blist	*node;
	int		i;

	if (size <= 0)
		return (NULL);
	stack = initialize_stack(values[0]);
	if (!stack)
		return (NULL);
	i = 1;
	while (i < size)
	{
		node = create_node(values[i]);
		if (!node)
		{
			// Limpieza en caso de error
			error(stack, NULL);
			return (NULL);
		}
		blstadd_back(&(stack->top_element), node);
		i++;
	}
	stack->size = size;
	return (stack);
}

/**
 * Función para limpiar la memoria de los stacks
 */
void	clean_stacks(t_stack *stack_a, t_stack *stack_b)
{
	t_blist	*current;
	t_blist	*next;

	if (stack_a)
	{
		current = stack_a->top_element;
		while (current)
		{
			next = current->next;
			free(current);
			current = next;
		}
		free(stack_a);
	}
	if (stack_b)
	{
		current = stack_b->top_element;
		while (current)
		{
			next = current->next;
			free(current);
			current = next;
		}
		free(stack_b);
	}
}

/**
 * Función para mostrar el resultado del cálculo de costos
 */
void	print_cost_result(t_cost *cost, t_stack *stack_a, t_stack *stack_b)
{
	t_blist	*candidate_node;

	if (!cost)
	{
		printf("Error: Cost calculation failed\n");
		return ;
	}
	candidate_node = get_node_from_index(cost->candidate_index,
			stack_a->top_element);
	printf("==== COST CALCULATION RESULTS ====\n");
	printf("Total cost: %d\n", cost->total_cost);
	printf("Candidate index: %d\n", cost->candidate_index);
	if (candidate_node)
		printf("Candidate value: %d\n", candidate_node->value);
	else
		printf("Candidate value: N/A (node not found)\n");
	printf("Stack A movements: %d\n", cost->stack_a_mov);
	printf("Stack B movements: %d\n", cost->stack_b_mov);
	printf("================================\n\n");
}

/**

	* Test case 1: Prueba con valores ordenados en stack_a y algunos valores en stack_b
 */
void	test_case_1(void)
{
	t_stack	*stack_a;
	t_stack	*stack_b;
	t_cost	*cost;
	int		values_a[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
	int		values_b[] = {15, 12, 8, 5};

	printf("\n=== TEST CASE 1: Ordered values ===\n");
	stack_a = setup_test_stack(values_a, 10);
	stack_b = setup_test_stack(values_b, 4);
	printf("Initial stacks:\n");
	print_stack(stack_a, 'a');
	print_stack(stack_b, 'b');
	cost = calculate_cost(stack_a, stack_b);
	print_cost_result(cost, stack_a, stack_b);
	// Limpieza
	free(cost);
	clean_stacks(stack_a, stack_b);
}

/**
 * Test case 2: Prueba con valores desordenados en stack_a y stack_b
 */
void	test_case_2(void)
{
	t_stack	*stack_a;
	t_stack	*stack_b;
	t_cost	*cost;
	int		values_a[] = {9, 2, 7, 4, 1, 6, 3, 8, 5, 10};
	int		values_b[] = {15, 12, 8, 5};

	printf("\n=== TEST CASE 2: Unordered values ===\n");
	stack_a = setup_test_stack(values_a, 10);
	stack_b = setup_test_stack(values_b, 4);
	printf("Initial stacks:\n");
	print_stack(stack_a, 'a');
	print_stack(stack_b, 'b');
	cost = calculate_cost(stack_a, stack_b);
	print_cost_result(cost, stack_a, stack_b);
	// Limpieza
	free(cost);
	clean_stacks(stack_a, stack_b);
}

/**
 * Test case 3: Prueba con valores negativos
 */
void	test_case_3(void)
{
	t_stack	*stack_a;
	t_stack	*stack_b;
	t_cost	*cost;
	int		values_a[] = {-10, -5, 0, 5, 10};
	int		values_b[] = {-8, -3, 3, 8};

	printf("\n=== TEST CASE 3: Negative values ===\n");
	stack_a = setup_test_stack(values_a, 5);
	stack_b = setup_test_stack(values_b, 4);
	printf("Initial stacks:\n");
	print_stack(stack_a, 'a');
	print_stack(stack_b, 'b');
	cost = calculate_cost(stack_a, stack_b);
	print_cost_result(cost, stack_a, stack_b);
	// Limpieza
	free(cost);
	clean_stacks(stack_a, stack_b);
}

/**
 * Test case 4: Prueba con stack_b casi vacío
 */
void	test_case_4(void)
{
	t_stack	*stack_a;
	t_stack	*stack_b;
	t_cost	*cost;
	int		values_a[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
	int		values_b[] = {0};

	printf("\n=== TEST CASE 4: Stack B with only one element ===\n");
	stack_a = setup_test_stack(values_a, 10);
	stack_b = setup_test_stack(values_b, 1);
	printf("Initial stacks:\n");
	print_stack(stack_a, 'a');
	print_stack(stack_b, 'b');
	cost = calculate_cost(stack_a, stack_b);
	print_cost_result(cost, stack_a, stack_b);
	// Limpieza
	free(cost);
	clean_stacks(stack_a, stack_b);
}

/* int	main(void)
{
	printf("Testing calculate_cost function\n");
	// Ejecutar casos de prueba
	test_case_1();
	test_case_2();
	test_case_3();
	test_case_4();
	return (0);
} */
